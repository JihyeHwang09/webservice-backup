buildscript {
    // ext: build.gradle에서 사용하는 전역변수를 설정하겠다는 의미
    // springBootVersion이라는 전역변수를 생성하고 그 값을 '2.1.7.RELEASE'로 한다.
    // ->
    ext {
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        // spring-boot-gradle-plugin을 의존성을 받는다는 의미임
        classpath ("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
// io.spring.dependency-management은 스프링 부트의 의존성들을 관리해주는 플러그인
// -> 꼭 추가해야 한다!
apply plugin: 'io.spring.dependency-management'


group 'com.phang.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

/*
 repositories
 : 각종 의존성(라이브러리들)을 어떤 원격 저장소에서 받을 지를 정한다.
    기본적으로 mavenCentral을 많이 사용하지만,
    최근에는 라이브러리 업로드 난이도 때문에 jcenter()도 많이 사용함
    이번에는 mavenCentral, jcenter 둘 다 사용함
 */
repositories {
    mavenCentral()
    // jcenter(): 라이브러리 업로드를 간단하게 함
    jcenter()
}

/*
 dependencies
 : 프로젝트 개발에 필요한 의존성들을 선언하는 곳
   cf) 인텔리제이는 메이븐 저장소의 데이터를 인덱싱해서 관리한다.
   -> 커뮤니티 버전을 사용해도 의존성 자동완성이 가능

 */

dependencies {
    // compile 메서드 안에 라이버리르이 이름 앞부분만 추가한 뒤 자동완성 클릭시, 그레이들이 변경된 내용을 자동으로 반영하기 시작한다.
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
//    testCompile group: 'junit', name: 'junit', version: '4.12'
}